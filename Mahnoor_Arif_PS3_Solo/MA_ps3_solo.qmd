
title: "30538 Problem Set 3: git Solution "
author: "Mahnoor Arif"
date: "2024-10-21"
format: html
  
    

# SOLO 

## Learn git branching (15 points)
Go to https://learngitbranching.js.org. This is the best visual git explainer we know of.

1. Complete all the levels of main "Introduction Sequence". Report the commands needed to complete "Git rebase" with one line per command. 
```#{bash} 
paste solution here
$ git checkout -b bugFix

$ git commit

$ git checkout main

 git commit

 git checkout bugFix

 git rebase main
```

2. Complete all the levels of main "Ramping up". Report the commands needed to complete "Reversing changes in git" with one line per command. 
```#{bash} 
paste solution here
# git reset HEAD~1

# git checkout pushed

# git revert HEAD
```

3. Complete all the levels of remote "Push & Pull -- Git Remotes!". Report the commands needed to complete "Locked Main" with one line per command.
```#{bash} 
paste solution here

$ git reset --hard o/main
$ git checkout -b feature C2

$ git push origin feature
```

## Exercises

- Basic Staging and Branching (10-15)
1. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/basic-staging/README.md). For your pset submission, tell us only the answer to the last question (22).
```##Answer
$ git status

On branch master
nothing to commit, working tree clean

```

2. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/basic-branching/README.md). For your pset submission, tell us only the output to the last question (18).
```
###Answer
diff --git a/basic-branching/file1.txt b/basic-branching/file1.txt
deleted file mode 100644
index 3ccde03..0000000
--- a/basic-branching/file1.txt
+++ /dev/null
@@ -1 +0,0 @@
-Mahnoor
diff --git a/basic-branching/file2.txt b/basic-branching/file2.txt
new file mode 100644
index 0000000..d2947f4
--- /dev/null
+++ b/basic-branching/file2.txt
@@ -0,0 +1 @@
+This is file2.
##
```

- Merging 
1. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/ff-merge/README.md). After completing all the steps (1 through 12), run git log --oneline --graph --all and report the output.
```
##Answer

```{bash}
$ git log --oneline --graph --all
* 5dde55f (HEAD -> master) Update greeting.txt to uppercase greeting
* b56fdb6 Add content to greeting.txt
* 38b4cb3 Add file greeting.txt

#########

2. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/3-way-merge/README.md). Report the answer to step 11.
```
##Answer
$ git log --oneline --graph --all
*   e195045 (HEAD -> master) Merge branch 'greeting'
|\
| * ff54fe6 (greeting) Update greeting.txt with my favorite greeting
* | 8aa0e5b Add README.md with repository information
|/
* 2735d3a Add content to greeting.txt
* b840ed9 Add file greeting.txt

arifm@mahnoorarif MINGW64 ~/OneDrive/Documents/GitHub/git-katas/3-way-merge/exercise (master)

```

3. Identify the type of merge used in Q1 and Q2 of this exercise. In words, explain the difference between the two merge types, and describe scenarios where each type would be most appropriate.

```{bash}
#Answer
##In Q1, a fast-forward merge is used, which occurs when 
#the branch being merged has not diverged from the current
#branch, meaning no new commits have been made to the main
#branch since branching. Here, Git simply moves the branch
#pointer forward to include all new commits linearly without
#creating a merge commit. In contrast, Q2 involves a 
#three-way merge, used when both branches have new 
#commits since they diverged. In a three-way merge,
#Git references the last common ancestor and the 
#latest commits on each branch to create a merge 
#commit that preserves the full history and shows
#where branches rejoined, creating a non-linear 
#history. Fast-forward merges are ideal for simple,
#sequential updates, while three-way merges are most
#appropriate when branches have independent changes, 
#as they provide a clearer historical view of branch 
#divergence and re-integration.
```

- Undo, Clean, and Ignore
1. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/basic-revert/README.md). Report the answer to step 13.
```
##Answer
$ git show cdbb805
commit cdbb805e9eab4f28eee7d7cbc5200c7512d8a1f4
Author: git-katas trainer bot <git-katas@example.com>
Date:   Fri Oct 25 13:33:00 2024 -0500

    Add credentials to repository

diff --git a/credentials.txt b/credentials.txt
new file mode 100644
index 0000000..8995708
--- /dev/null
+++ b/credentials.txt
@@ -0,0 +1 @@
+supersecretpassword

#####

```

2. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/basic-cleaning/README.md). Look up `git clean` since we haven't seen this before. For context, this example is about cleaning up compiled C code, but the same set of issues apply to random files generated by knitting a document or by compiling in Python. Report the terminal output from step 7. 
```

###Answer
$ git clean -f -d
Removing README.txt~
Removing obj/
Removing src/myapp.c~
Removing src/oldfile.c~

```

3. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/ignore/README.md). Report the answer to 15 ("What does git status say?") 
```
#Answer 15
git status
bash: !file3.txt: event not found
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        deleted:    file1.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   .gitignore

#####


```

